@{
    ViewBag.Title = "Home Page";
}
@section css {
    <link rel="stylesheet" type="text/css" href="../../css/datepicker.css" />
    <link rel="stylesheet" type="text/css" href="../../css/fileuploader.css" />
}
@section scripts {
	<script type="text/javascript" src="../../Scripts/knockout-2.0.0.js"></script>
	<script type="text/javascript">
		ko.underscoreTemplateEngine = function () { }
		ko.underscoreTemplateEngine.prototype = ko.utils.extend(new ko.templateEngine(), {
			renderTemplateSource: function (templateSource, bindingContext, options) {
				// Precompile and cache the templates for efficiency
				var precompiled = templateSource['data']('precompiled');
				if (!precompiled) {
					precompiled = _.template("<% with($data) { %> " + templateSource.text() + " <% } %>");
					templateSource['data']('precompiled', precompiled);
				}
				// Run the template and parse its output into an array of DOM elements
				var renderedMarkup = precompiled(bindingContext).replace(/\s+/g, " ");
				return ko.utils.parseHtmlFragment(renderedMarkup);
			},
			createJavaScriptEvaluatorBlock: function (script) {
				return "<%= " + script + " %>";
			}
		});
		ko.setTemplateEngine(new ko.underscoreTemplateEngine());
	</script>
    <script type="text/javascript" src="../../Scripts/bootstrap-datepicker.js"></script>
	<script type="text/javascript" src="../../Scripts/signals.js"></script>
	<script type="text/javascript" src="../../Scripts/hasher.js"></script>
	<script type="text/javascript" src="../../Scripts/crossroads.js"></script>
	<script type="text/javascript" src="../../Scripts/script.js"></script>
    <script type="text/javascript" src="../../Scripts/fileuploader.js"></script>
    <script type="text/javascript" src="../../Scripts/jquery.signalR-0.5.2.js"></script>
    <script type="text/javascript" src="/signalr/hubs"></script>

	@Html.Partial("_ordersStatusView")

    @Html.Partial("_productsOverviewView")
    @Html.Partial("_productDetailView")
    @Html.Partial("_productEditView")

    @Html.Partial("_customersOverviewView")
    @Html.Partial("_customerDetailView")
    @Html.Partial("_customerEditView")

    <script type="text/javascript">
        var objGraph = JSON.parse('@Html.Raw(ViewBag.objGraph)');
        var viewModel = utils.convertToViewModel(objGraph);
        var dataAccessHub = $.connection.dataAccessHub;
        
        (function () {
        	dataAccessHub.updateModel = function (changes) {
        		console.log("updating changes!!!");
        		console.log(changes);
        		try {
        			_.each(changes, function (e) {
        				var data = e.data;
        				if (e.op === "add") {
        					(function (tables) {
        						_.each(tables, function (table) {
        							_.each(data[table], function (e) {
        								console.log("adding:" + JSON.stringify(e) + " to:" + table);
        								viewModel[table].push(utils.getObservableObject(e));
        							});
        						});
        					})(["blobs", "customers", "orders", "products"]);
        				}
        				else if (e.op === "delete") {
        					(function (tables) {
        						_.each(tables, function (table) {
        							_.each(data[table], function (e) {
        								viewModel[table].remove(function (k) {
        									return k[table.slice(0, -1) + "ID"]() === e[table.slice(0, -1) + "ID"];
        								});
        							});
        						});
        					})(["blobs", "customers", "orders", "products"]);
        				}
        				else if (e.op === "update") {
        					(function (tables) {
        						_.each(tables, function (table) {
        							_.each(data[table], function (e) {
        								_.chain(_.chain(viewModel[table]()).filter(function (k) {
        									return k[table.slice(0, -1) + "ID"]() === e[table.slice(0, -1) + "ID"];
        								}).last().value()).each(function (val, key) {
        									if (Object.prototype.toString.call(e[key]) === '[object Array]') {
        										for (var i = 0; i < e[key].length; i++) {
        											if (val()[i]) {
        												val()[i](e[key][i]);
        											}
        											else {
        												val()[i] = ko.observable(e[key][i]);
        											}
        										}
        									}
        									else {
        										val(e[key]);
        									}
        								});
        								viewModel[table].push(utils.getObservableObject(e));
        							});
        						});
        					})(["blobs", "customers", "orders", "products"]);
        				}
        				else {
        					console.log("Unknown operation from the server!!!!");
        				}
        			});
        		}
        		catch (ex) {
        			console.log(ex);
        		}
            }
        })();
        (function () {
            crossroads.addRoute("orders/status/{status}", function (status) {
                $(".nav-collapse .nav li").removeClass("active");
                $('.nav li a[href="#/orders/status/pending"]').parent().addClass("active");
        		var mainBody = $("#mainBody");
        		if (utils.orderStatusIndex.indexOf(status) === -1)
        			return;
        		var html = $("#ordersStatusView").html();
        		var parsed = _.template(html, {
        			ordersFunc: "$root.getOrdersByStatus('" + status + "')",
					status: status
        		}, { variable: 'data' });
        		mainBody.html(parsed);
        		ko.applyBindings(viewModel);
        	});

            crossroads.addRoute("products/overview", function () {
                $(".nav-collapse .nav li").removeClass("active");
                $('.nav li a[href="#/products/overview"]').parent().addClass("active");
        	    var mainBody = $("#mainBody");
        	    var html = $("#productsOverviewView").html();
        	    var parsed = _.template(html, {
                    productsFunc: "products"
        	    }, { variable: "data" });
        	    mainBody.html(parsed);
        	    ko.applyBindings(viewModel, mainBody[0]);
            });
            crossroads.addRoute("product/id/{id}", function (id) {
            	$(".nav-collapse .nav li").removeClass("active");
            	$('.nav li a[href="#/products/overview"]').parent().addClass("active");
            	var mainBody = $("#mainBody");
            	var html = $("#productDetailView").html();
            	var parsed = _.template(html, {
            		productID: id
            	}, { variable: "data" });
            	mainBody.html(parsed);
            	ko.applyBindings(viewModel, mainBody[0]);
            });

            crossroads.addRoute("customers/overview", function () {
                $(".nav-collapse .nav li").removeClass("active");
                $('.nav li a[href="#/customers/overview"]').parent().addClass("active");
                var mainBody = $("#mainBody");
                var html = $("#customersOverviewView").html();
                var parsed = _.template(html, {
                    customersFunc: "customers"
                }, { variable: "data" });
                mainBody.html(parsed);
                ko.applyBindings(viewModel, mainBody[0]);
            });

            crossroads.addRoute("customer/id/{id}", function (id) {
                $(".nav-collapse .nav li").removeClass("active");
                $('.nav li a[href="#/customers/overview"]').parent().addClass("active");
                var mainBody = $("#mainBody");
                var html = $("#customerDetailView").html();
                var parsed = _.template(html, {
                    customerID: id
                }, { variable: "data" });
                mainBody.html(parsed);
                ko.applyBindings(viewModel, mainBody[0]);
            });

            crossroads.addRoute("customer/edit/{id}", function (id) {
                $(".nav-collapse .nav li").removeClass("active");
                $('.nav li a[href="#/customers/overview"]').parent().addClass("active");
                var mainBody = $("#mainBody");
                var html = $("#customerEditView").html();
                var parsed = _.template(html, {
                    customerID: id
                }, { variable: "data" });
                mainBody.html(parsed);
                ko.applyBindings(viewModel, mainBody[0]);

                $('.datePicker').datepicker();

                var uploader = new qq.FileUploader({
                    element: document.getElementById('customerPhoto'),
                    action: '/customer/uploadPhoto/' + id,
                    debug: true
                });

                $("#saveCustomer").click(function () {
                    var customer = {
                        birthDay: (new Date($('#customerBirthDay').val())).toJSON(),
                        name: $('#customerName').val(),
                        customerID: id
                    };
                    console.log(customer);
                    $.ajax({
                        url: "customer/update",
                        data: customer,
                        type: "post",
                        success: function () {
                            document.location.href = '#/customer/id/' + id;
                        },
                        error: function () {
                            alert("some error occured processing the request!!");
                            document.location.href = '#/customer/id/' + id;
                        }
                    });

                    return false;
                });
            });

            crossroads.addRoute("product/edit/{id}", function (id) {
            	$(".nav-collapse .nav li").removeClass("active");
            	$('.nav li a[href="#/products/overview"]').parent().addClass("active");
            	var mainBody = $("#mainBody");
            	var html = $("#productEditView").html();
            	var parsed = _.template(html, {
            		productID: id
            	}, { variable: "data" });
            	mainBody.html(parsed);
            	ko.applyBindings(viewModel, mainBody[0]);


            	var uploader = new qq.FileUploader({
            		element: document.getElementById('productFile'),
            		action: '/product/uploadFile/' + id,
            		params: {
            			type: $("#productFileType").val()
            		},
            		debug: true
            	});

            	$("#saveProduct").click(function () {
            		var customer = {
            			birthDay: (new Date($('#customerBirthDay').val())).toJSON(),
            			name: $('#customerName').val(),
            			customerID: id
            		};
            		console.log(customer);
            		$.ajax({
            			url: "customer/update",
            			data: customer,
            			type: "post",
            			success: function () {
            				document.location.href = '#/customer/id/' + id;
            			},
            			error: function () {
            				alert("some error occured processing the request!!");
            				document.location.href = '#/customer/id/' + id;
            			}
            		});

            		return false;
            	});
            });
        })();
        $.connection.hub.start(function () {
            (function () {

                function parseHash(newHash, oldHash) {
                    crossroads.parse(newHash);
                }
                hasher.initialized.add(parseHash); //parse initial hash
                hasher.changed.add(parseHash); //parse hash changes
                hasher.init(); //start listening for history change

                //update URL fragment generating new history record
                hasher.setHash('orders/status/pending');
            })();
        });

    </script>
}
<div class="row-fluid" id="mainBody">
</div>
